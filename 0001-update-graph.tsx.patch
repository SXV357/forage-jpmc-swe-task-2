From d263efecb06b3027981dd9f89f310e1e0e043c85 Mon Sep 17 00:00:00 2001
From: Shreyas Viswanathan <shrevis2018@gmail.com>
Date: Tue, 13 Jun 2023 14:50:06 -0500
Subject: [PATCH] update graph.tsx

---
 src/App.tsx   | 20 +++++++++++++-------
 src/Graph.tsx | 16 +++++++++++++---
 2 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 68b7c54..5d6f874 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  displayGraph: boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      displayGraph: false
     };
   }
 
@@ -29,20 +31,24 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.displayGraph){ // we don't want to display the graph before the user clicks on "Start Streaming Data"
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    setInterval(() => {
+    let numRequests = 0;
+    const interval = setInterval(() => {
       DataStreamer.getData((serverResponds: ServerRespond[]) => {
-        // Update the state by creating a new array of data that consists of
-        // Previous data in the state and the new data from server
-        if (serverResponds.length !== 0){
-          this.setState({ data: [...this.state.data, ...serverResponds] });
-        }});
+        this.setState({ data: [...this.state.data, ...serverResponds], displayGraph: true });
+      });
+      numRequests += 1;
+      if (numRequests > 2500){ // stop making requests to the server after 5000 have been made
+        clearInterval(interval);
+      }
     }, 100)
   }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..48fbfd4 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -33,6 +33,16 @@ class Graph extends Component<IProps, {}> {
   componentDidMount() {
     // Get element to attach the table from the DOM.
     const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    elem.setAttribute('view', 'y_line');
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute('row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top_ask_price"]');
+    elem.setAttribute('aggregates', `{
+      "stock": "distinct count",
+      "top_ask_price": "avg",
+      "top_bid_price": "avg",
+      "timestamp": "distinct count"
+    }`);
 
     const schema = {
       stock: 'string',
@@ -54,11 +64,11 @@ class Graph extends Component<IProps, {}> {
 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
+    if (this.table && this.props.data) {
       // As part of the task, you need to fix the way we update the data props to
       // avoid inserting duplicated entries into Perspective table again.
+
       this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
         return {
           stock: el.stock,
           top_ask_price: el.top_ask && el.top_ask.price || 0,
-- 
2.41.0

